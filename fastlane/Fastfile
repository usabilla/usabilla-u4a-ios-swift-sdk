fastlane_version "2.64.1"
import "./propertiesFile.rb"
import "./BuildFastFile.rb"
import "./buildFramework.rb"
default_platform :ios
actions_path "#{File.expand_path(File.dirname(__FILE__))}/../"
platform :ios do


#used in STAGE  "Run UT"    
    desc "Builds the framework for all xcode version specified in fastlane/versions.json"
    lane :buildAll do
        versions = xcodeVersions
        versions.each do |version|
        buildForXcodeVersion(
            version: version,
            project_directory: projectDirectory
        )
        end
    end

#used in STAGE  "Generate Artefacts"
    desc "Builds the framework for all xcode version specified in fastlane/versions.json"
    lane :buildAllAndGenerateArtefacts do
        versions = checkXcodeVersions
        versions.each do |version|
        #first remove previous builds
        removeAllBuilds(
            version: version,
            project_directory: projectDirectory
        )
        # Build for xcode version
        buildForXcodeVersion(
            version: version,
            project_directory: projectDirectory
        )
        # Copy generated artefacts for carthage and pods
        copyToPodsFromBuild(
            version: version,
            project_directory: projectDirectory
        )
        copyToCarthageFromBuild(
            version: version,
            project_directory: projectDirectory
        )
        end
    end

#used in STAGE  "Create Artefacts"	
    desc "Create Artefacts (Pods and Carthage)"
    lane :createArtefacts do 
        versions = checkXcodeVersions
        versions.each do |version|
			copyToPodsFromBuild(
    	        version: version,
        	    project_directory: projectDirectory
        	)
			copyToCarthageFromBuild(
    	        version: version,
        	    project_directory: projectDirectory
	        )
        end
    end



#used in STAGE  "Run Unit Tests"
    desc "Run unit tests for all xcode versions"
    lane :runUnitTests do
        version = lastXcodeVersion
        # Build for given xcode version
        scan(
            workspace: 'Usabilla.xcworkspace',
            scheme: 'Usabilla',
            clean: true,
            build_for_testing: true,
            derived_data_path: './derivedData'
        )
        # Unit test for all devices
        unitTestAllDevices(version: version)
    end

#used in STAGE  "UI Tests"
    desc "UI test"
    lane :uiTest do
    	buildAndRunUITest( 
    		    version: lastXcodeVersion,
        	    project_directory: projectDirectory,
        	    devices: uiTestDevices
    		)
    end


    desc "Check that all required xcode versions are installed"
    lane :checkXcodeVersions do
        versions = xcodeVersions
        versions.each do |version|
            xcversion(version: version)         
        end
        versions
    end

#used in STAGE  "System tests"
    desc "Run System tests"
    lane :systemTests do 
        versions = checkXcodeVersions
        versions.each do |version|
	        systemTestsAfterBuild(
    		    version: version,
        	    project_directory: projectDirectory
    		)
    	end
    end

#used in STAGE  "Validate framework"
	desc "Validate that framework does NOT have LLVM nor GCC code in the build"
	lane :validateFrameWork do
      versions = checkXcodeVersions
        versions.each do |version|
			validateBuildLLVMGCC(
	            version: version,
	            project_directory: projectDirectory
    	    )
    	end
	end

##############################################
########       PRIVATE LANES          ########
##############################################

#used in  lane "runUnitTests"
    desc "Unit tests for all device model specified in fastlane/unit-tests.json"
    private_lane :unitTestAllDevices do |version|
        deviceModels = unitTestDevices
        deviceModels.each do |deviceModel|
            unitTest(deviceModel: deviceModel)
        end
    end

#used in lane "unitTestAllDevices"
    desc "Unit test"
    private_lane :unitTest do |options|
        unless options[:deviceModel]
            UI.error("missing device model")
        end
        scan(
            workspace: 'Usabilla.xcworkspace',
            scheme: 'Usabilla',
            test_without_building: true,
            derived_data_path: './derivedData',
            code_coverage: true,
            device: options[:deviceModel]
        )
    end

#used in lane  "validateAll"	
    desc "Validate integrating the framework (with specified version) into a sample project"
    private_lane :validateSDK do |options|
        unless options[:version]
            UI.error("missing Xcode version")
        end
        version = options[:version]
        UI.message("Validating for Xcode-#{version}")

        resetSimulator
        xcversion(version: version)
        framework_path = "#{projectDirectory}Xcode-#{version}/Pods/Usabilla.Framework"
        cleanReleaseProject
        sh("cp -r #{framework_path} #{projectDirectory}automation/ReleaseValidator/")
	    scan(
            project: 'automation/ReleaseValidator/ReleaseValidator.xcodeproj',
            clean: true,
            device: "iPhone SE"
        )
        cleanReleaseProject
        resetSimulator
    end

#used in STAGE  "Validation"	
    desc "Validate integrating the framework (for all xcode version specified in fastlane/versions-validate.json) into a sample project"
    private_lane :validateAll do
        versions = xcodeVersions
        versions.each do |version|
            validateSDK(version: version)
        end
    end

end
