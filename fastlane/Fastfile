fastlane_version "2.64.1"
import "./CarthageFastFile.rb"
import "./BuildFastFile.rb"

default_platform :ios
actions_path "#{File.expand_path(File.dirname(__FILE__))}/../"
platform :ios do

    # def xcode_version 
    #     sh("xcodebuild -version | head -1 | sed -e 's@.*\([0-9]..\).*@\1@'")
    # end
    def projectDirectory
        "#{File.expand_path(File.dirname(__FILE__))}/../"
    end

    def cleanReleaseProject
        sh("rm -rf #{projectDirectory}automation/ReleaseValidator/Usabilla.Framework")        
    end

    def readXcodeVersions
        JSON.parse(File.read("versions.json"), {:symbolize_names => true})
    end

    def readXcodeVersionsValidation
        JSON.parse(File.read("versions-validate.json"), {:symbolize_names => true})
    end

    def readUnitTestDevices
        JSON.parse(File.read("unit-test-devices.json"), {:symbolize_names => true})
    end

    def resetSimulator
       sh("killall -9 'Simulator' || echo 'No simulator launched'")
       sh("launchctl remove com.apple.CoreSimulator.CoreSimulatorService || true")
    end

    desc "Build for Unit Testing"
    lane :buildForUnitTesting do
        scan(
            workspace: 'Usabilla.xcworkspace',
            scheme: 'Usabilla',
            clean: true,
            build_for_testing: true,
            derived_data_path: './derivedData'
        )
    end

    desc "Unit tests for all device model specified in fastlane/unit-tests.json"
    lane :unitTestAllDevices do
        xcversion(version: "9.2")
        versions = readUnitTestDevices
        versions.each do |deviceModel|
            unitTest(deviceModel: deviceModel)
        end
    end

    desc "Unit test"
    lane :unitTest do |options|
        unless options[:deviceModel]
            UI.error("missing device model")
        end
        scan(
            workspace: 'Usabilla.xcworkspace',
            scheme: 'Usabilla',
            test_without_building: true,
            derived_data_path: './derivedData',
            code_coverage: true,
            device: options[:deviceModel]
        )
    end

    desc "Build for UI Testing"
    lane :buildForUITesting do
        scan(
            workspace: 'Usabilla.xcworkspace',
            scheme: 'UsabillaUITestApp',
            clean: true,
            build_for_testing: true,
        )
    end

    desc "UI test"
    lane :uiTest do
        scan(
            workspace: 'Usabilla.xcworkspace',
            scheme: 'UsabillaUITestApp',
            test_without_building: true,            
            devices: ["iPhone 7 (10.3.1)"]
        )
    end

    desc "Builds the framework for the specified framework"
    lane :buildSDK do |options|
        unless options[:version]
            UI.error("missing Xcode version")
        end
        version = options[:version]
        UI.message("Building for Xcode-#{version}")
        xcversion(version: version)
        buildFramework
        buildCarthage
        crateReleaseDirectory(
            version: version,
            project_directory: projectDirectory
        )
        cleanProject
    end

    desc "Check that all required xcode versions are installed"
    lane :checkXcodeVersions do
        versions = readXcodeVersions
        versions.each do |version|
            xcversion(version: version)         
        end
        versions
    end

    desc "Builds the framework for all xcode version specified in fastlane/versions.json"
    lane :buildAll do
        versions = checkXcodeVersions
        versions.each do |version|
            buildSDK(version: version)
        end
    end

    desc "Validate integrating the framework (with specified version) into a sample project"
    lane :validateSDK do |options|
        unless options[:version]
            UI.error("missing Xcode version")
        end
        version = options[:version]
        UI.message("Validating for Xcode-#{version}")

        resetSimulator
        xcversion(version: version)
        framework_path = "#{projectDirectory}Xcode-#{version}/Pods/Usabilla.Framework"
        cleanReleaseProject
        sh("cp -r #{framework_path} #{projectDirectory}automation/ReleaseValidator/")
	    scan(
            project: 'automation/ReleaseValidator/ReleaseValidator.xcodeproj',
            clean: true,
            device: "iPhone SE"
        )
        cleanReleaseProject
        resetSimulator
    end

    desc "Validate integrating the framework (for all xcode version specified in fastlane/versions-validate.json) into a sample project"
    lane :validateAll do
        versions = readXcodeVersionsValidation
        versions.each do |version|
            validateSDK(version: version)
        end
    end

    desc "Run integration tests"
    lane :integrationTests do
        scan(
            project: './automation/UsabillaIntegrationTest/UsabillaIntegrationTest.xcodeproj',
            scheme: "UsabillaIntegrationTest",
            clean: true,
            devices: [ "iPhone 6s (10.0)", "iPhone 5s (9.3)"]
            #add  "iPhone 8 (11.1)", when iOS 9 is supported by CircleCI and we migarte from Xcode 8.3.3 to 9
            #see https://discuss.circleci.com/t/please-add-simulators-for-ios-9-10-to-xcode-9-image/16530
        )
    end
end
