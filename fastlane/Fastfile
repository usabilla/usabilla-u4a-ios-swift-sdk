import "./buildconfig.rb"
import "./buildFramework.rb"
import "./buildXamarinFramework.rb"
import "./GetLatestReleaseVersion.rb"

default_platform :ios

platform :ios do

	before_all do
		#ENV["SDK_VERSION"] = get_info_plist_value(path: "./Usabilla/Info.plist", key: "USABILLA_VERSION")
		ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
	end

	#used in STAGE  "Check Xcode and Post to Slack"
	desc "Check Xcode and Post to Slack"
	lane :checkXcode do
		list = checkLatestXcode()
		UI.important "xcode lists - #{list}"
		postToSlack(
			message: "`#{list['available_xcodes']}` *:xcode: Xcode Available* \n`#{list['available_xcodes_gm']}` *:xcode-gm: GM Versions Available* ",
			payload: list.key?('xcode_data') ? list['xcode_data'] : nil
		)
	end

	#used in STAGE  "Run Lint"
	desc "Checks liniting"
	lane :lint do
		swiftlint(
			reporter: "html",
			output_file: "fastlane/swiftlint.html"
		)
	end

	#used in STAGE  "Generate Artefacts"
	desc "Builds the framework for all xcode version specified in fastlane/versions.json"
	lane :buildAllAndGenerateArtefacts do
		versions = checkXcodeVersions
		versions.each do |version|
			#first remove previous builds
			removeAllBuilds(
				version: version,
				project_directory: projectDirectory
			)
			# Build for xcode version
			buildXCFrameworkForXcodeVersion(
				xcode: version
			)
		end
	end


	#used in STAGE  "Run Unit Tests"
	desc "Run unit tests for all xcode versions"
	lane :runUnitTests do
		version = masterXcodeVersion
		# Build for given xcode version
		scan(
			workspace: 'Usabilla.xcworkspace',
			scheme: 'Usabilla',
			clean: true,
			build_for_testing: true,
			derived_data_path: './derivedData',
			slack_only_on_failure: true
		)
		# Unit test for all devices
		unitTestAllDevices(version: version)
	end

	#used in STAGE  "UI Tests"
	desc "UI test"
	lane :uiTest do
		buildAndRunUITest(
			version: masterXcodeVersion,
			project_directory: projectDirectory,
			devices: uiTestDevices
		)
	end


	desc "Check that all required xcode versions are installed"
	lane :checkXcodeVersions do
		versions = xcodeVersions
		versions.each do |version|
			xcversion(version: version)
		end
		versions
	end

	#used in STAGE  "System tests"
	desc "Run System tests"
	lane :systemTests do
		versions = checkXcodeVersions
		versions.each do |version|
			systemTestsAfterBuild(
				version: version,
				project_directory: projectDirectory
			)
		end
	end

	#used in STAGE  "Validate framework"
	desc "Validate that framework does NOT have LLVM nor GCC code in the build"
	lane :validateFrameWork do
		versions = checkXcodeVersions
		versions.each do |version|
			validateBuildLLVMGCC(version: version)
		end
	end

	##############################################
	########       PRIVATE LANES          ########
	##############################################

	#used in  lane "runUnitTests"
	desc "Unit tests for all device model specified in fastlane/unit-tests.json"
	private_lane :unitTestAllDevices do |version|
		deviceModels = unitTestDevices
		deviceModels.each do |deviceModel|
			unitTest(deviceModel: deviceModel)
		end
	end

	#used in lane "unitTestAllDevices"
	desc "Unit test"
	private_lane :unitTest do |options|
		unless options[:deviceModel]
			UI.error("missing device model")
		end
		scan(
			workspace: 'Usabilla.xcworkspace',
			scheme: 'Usabilla',
			test_without_building: true,
			derived_data_path: './derivedData',
			code_coverage: true,
			device: options[:deviceModel],
			slack_only_on_failure: true
		)
	end

	#used to create all releases on the swift-sdk git
	# takes the version from  info.plist
	# uploads correct assets (carthage, pods and xcframework zip file)
	desc "creating release drafts"
	lane :createDraftRelease do
		versions = xcodeVersions
		version = get_version_number(xcodeproj: "Usabilla.xcodeproj", target: "Usabilla")
		versions.each do |xcode|
			branch = "Xcode-#{xcode}"
			if xcode == masterXcodeVersion
				branch = "master"
			end
			buildConfig = getBuildConfigs()
			createAReleaseDraft(version: version, xcode: xcode, branch: branch)
		end
	end

	#used in STAGE  "Validation"
	desc "Validate integrating the framework (for all xcode version specified in fastlane/versions-validate.json) into a sample project"
	lane :validateAll do
		versions = xcodeVersions
		buildConfig = getBuildConfigs()
		configuration = buildConfig['configuration']
		versions.each do |version|
			validateSDK(version: version, configuration: configuration)
		end
	end

	#slack message
	desc "Post a message to slack channel"
	private_lane :postToSlack do |options|
		message = options[:message]
		success = options[:success]
		payload = options[:payload]
		default_payloads = [:git_branch, :git_author]
		slack(
			message: message,
			default_payloads: default_payloads,
			success: success,
		    payload: payload)
	end

	desc "Export xcframework"
	lane :buildXCFrameworkForXcodeVersion do |options|
		version = options[:xcode]
		buildConfig = getBuildConfigs()
		configuration = buildConfig['configuration']
		sh("rm -rf #{projectDirectory}XcodeBuilds/Xcode-#{version}/xcframeworks")
		xcversion(version: version)
		create_xcframework(
			workspace: 'Usabilla.xcworkspace',
			scheme: 'Usabilla',
    		include_bitcode: true,
            include_debug_symbols: true,
    		destinations: ['iOS'],
			configuration: "#{configuration}",
    		xcframework_output_directory: "XcodeBuilds/Xcode-#{version}/xcframeworks"
		)
		copyToSwiftPackage(version: version)
	end

	desc "Export Unity-Xamarin xcframework"
	lane :buildUnityXamarinXCFramework do
		version = masterXcodeVersion
		buildConfig = getBuildConfigs()
		configuration = buildConfig['configuration']
		sh("rm -rf #{projectDirectory}XcodeBuilds/Xcode-#{version}/CSXCFrameworks")
		xcversion(version: version)
		create_xcframework(
			workspace: 'Usabilla.xcworkspace',
			scheme: 'UsabillaCS',
    		include_bitcode: true,
            include_debug_symbols: true,
    		destinations: ['iOS'],
			configuration: "#{configuration}",
    		xcframework_output_directory: "XcodeBuilds/Xcode-#{version}/CSXCFrameworks"
		)
		copyToCSSwiftPackage(version: version)
		sh('curl -X POST -F token=$TOKEN_TRIGGER_CS \
			-F ref=master \
			-F "variables[SDK_PIPELINE_ID]=$CI_PIPELINE_IID" \
			-F "variables[SDK_BRANCH]=$CI_COMMIT_REF_NAME" \
			-F "variables[SDK_FILENAME]=XcodeBuilds/master/UsabillaCSXCFramework.zip" \
			-F "variables[SDK_JOB_ID]=${CI_JOB_ID}" \
			-F "variables[SDK_VERSION]=${SDK_VERSION}" \
			https://gitlab.usabilla.net/api/v4/projects/$PROJ_ID_CS/trigger/pipeline')
	end
end
